/*****************************************************************************

Copyright (c) 1994, 2019, Oracle and/or its affiliates. All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2.0, as published by the
Free Software Foundation.

This program is also distributed with certain software (including but not
limited to OpenSSL) that is licensed under separate terms, as designated in a
particular file or component or in included license documentation. The authors
of MySQL hereby grant you an additional permission to link the program and
your derivative works with the separately licensed software that they have
included with MySQL.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License, version 2.0,
for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA

*****************************************************************************/

/** @file include/rem0rec.ic
 Record manager

 Created 5/30/1994 Heikki Tuuri
 *************************************************************************/

#include <innodb/data_types/dtuple_t.h>
#include <innodb/data_types/dtype_t.h>
#include <innodb/data_types/dtuple_get_n_fields.h>
#include <innodb/data_types/dtuple_get_data_size.h>
#include <innodb/data_types/dtuple_get_info_bits.h>
#include <innodb/record/rec_set_n_fields.h>
#include <innodb/memory/ut_memcpy.h>
#include <innodb/record/rec_set_bit_field_1.h>
#include <innodb/record/rec_get_info_bits.h>
#include <innodb/record/rec_set_info_bits_new.h>
#include <innodb/record/rec_offs_any_extern.h>
#include <innodb/record/rec_get_nth_field.h>
#include <innodb/record/rec_offs_nth_extern.h>
#include <innodb/record/rec_get_converted_extra_size.h>
#include <innodb/record/rec_get_nth_field_old.h>
#include <innodb/record/rec_get_n_fields_old_raw.h>
#include <innodb/record/rec_set_n_owned_new.h>
#include <innodb/record/rec_set_deleted_flag_new.h>
#include <innodb/record/rec_offs_any_null_extern.h>
#include <innodb/record/rec_get_n_fields_length.h>

#include "btr0types.h"
#include "dict0boot.h"
#include "dict0dict.h"
#include "page0types.h"
#include <innodb/machine/data.h>


/** The following function returns the size of a data tuple when converted to
 a physical record.
 @return size */
UNIV_INLINE
ulint rec_get_converted_size(
    const dict_index_t *index, /*!< in: record descriptor */
    const dtuple_t *dtuple,    /*!< in: data tuple */
    ulint n_ext)               /*!< in: number of externally stored columns */
{
  ulint data_size;
  ulint extra_size;

  ut_ad(index);
  ut_ad(dtuple);
  ut_ad(dtuple_check_typed(dtuple));

  ut_ad(dict_index_is_ibuf(index)

        /* If this is an instant index and the tuple comes from
        UPDATE, its fields could be less than index definition */
        || index->has_instant_cols()

        || dtuple_get_n_fields(dtuple) ==
               (((dtuple_get_info_bits(dtuple) & REC_NEW_STATUS_MASK) ==
                 REC_STATUS_NODE_PTR)
                    ? dict_index_get_n_unique_in_tree_nonleaf(index) + 1
                    : dict_index_get_n_fields(index))

        /* a record for older SYS_INDEXES table
        (missing merge_threshold column) is acceptable. */
        || (index->table->id == DICT_INDEXES_ID &&
            dtuple_get_n_fields(dtuple) == dict_index_get_n_fields(index) - 1));

  if (dict_table_is_comp(index->table)) {
    return (rec_get_converted_size_comp(
        index, dtuple_get_info_bits(dtuple) & REC_NEW_STATUS_MASK,
        dtuple->fields, dtuple->n_fields, NULL));
  }

  data_size = dtuple_get_data_size(dtuple, 0);

  extra_size = rec_get_converted_extra_size(data_size,
                                            dtuple_get_n_fields(dtuple), n_ext);

#if 0
    /* This code is inactive since it may be the wrong place to add
    in the size of node pointers used in parent pages AND it is not
    currently needed since ha_innobase::max_supported_key_length()
    ensures that the key size limit for each page size is well below
    the actual limit ((free space on page / 4) - record overhead).
    But those limits will need to be raised when InnoDB can
    support multiple page sizes.  At that time, we will need
    to consider the node pointer on these universal btrees. */

    if (dict_index_is_ibuf(index)) {
        /* This is for the insert buffer B-tree.
        All fields in the leaf tuple ascend to the
        parent node plus the child page pointer. */

        /* ibuf cannot contain externally stored fields */
        ut_ad(n_ext == 0);

        /* Add the data pointer and recompute extra_size
        based on one more field. */
        data_size += REC_NODE_PTR_SIZE;
        extra_size = rec_get_converted_extra_size(
            data_size,
            dtuple_get_n_fields(dtuple) + 1,
            0);

        /* Be sure dtuple->n_fields has this node ptr
        accounted for.  This function should correspond to
        what rec_convert_dtuple_to_rec() needs in storage.
        In optimistic insert or update-not-in-place, we will
        have to ensure that if the record is converted to a
        node pointer, it will not become too large.*/
    }
#endif

  return (data_size + extra_size);
}


#ifndef UNIV_HOTBACKUP
/** Compute a hash value of a prefix of a leaf page record.
@param[in]	rec		leaf page record
@param[in]	offsets		rec_get_offsets(rec)
@param[in]	n_fields	number of complete fields to fold
@param[in]	n_bytes		number of bytes to fold in the last field
@param[in]	fold		fold value of the index identifier
@param[in]	index		index where the record resides
@return the folded value */
UNIV_INLINE
ulint rec_fold(const rec_t *rec, const ulint *offsets, ulint n_fields,
               ulint n_bytes, ulint fold, const dict_index_t *index) {
  uint16_t i;
  const byte *data;
  ulint len;
  ulint n_fields_rec;

  ut_ad(rec_offs_validate(rec, NULL, offsets));
  ut_ad(rec_validate(rec, offsets));
  ut_ad(n_fields > 0 || n_bytes > 0);

  n_fields_rec = rec_offs_n_fields(offsets);
  ut_ad(n_fields <= n_fields_rec);
  ut_ad(n_fields < n_fields_rec || n_bytes == 0);

  if (n_fields > n_fields_rec) {
    n_fields = n_fields_rec;
  }

  if (n_fields == n_fields_rec) {
    n_bytes = 0;
  }

  for (i = 0; i < n_fields; i++) {
    data = rec_get_nth_field_instant(rec, offsets, i, index, &len);

    if (len != UNIV_SQL_NULL) {
      fold = ut_fold_ulint_pair(fold, ut_fold_binary(data, len));
    }
  }

  if (n_bytes > 0) {
    data = rec_get_nth_field_instant(rec, offsets, i, index, &len);

    if (len != UNIV_SQL_NULL) {
      if (len > n_bytes) {
        len = n_bytes;
      }

      fold = ut_fold_ulint_pair(fold, ut_fold_binary(data, len));
    }
  }

  return (fold);
}
#endif /* !UNIV_HOTBACKUP */





/** Gets the value of the specified field in the record in old style.
This is only used for record from instant index, which is clustered
index and has some instantly added columns.
@param[in]	rec	physical record
@param[in]	n	index of the field
@param[in]	index   clustered index where the record resides
@param[out]	len	length of the field, UNIV_SQL if SQL null
@return value of the field, could be either pointer to rec or default value */
UNIV_INLINE
const byte *rec_get_nth_field_old_instant(const rec_t *rec, uint16_t n,
                                          const dict_index_t *index,
                                          ulint *len) {
  ut_a(index != nullptr);

  if (n < rec_get_n_fields_old_raw(rec)) {
    return (rec_get_nth_field_old(rec, n, len));
  }

  const byte *field;

  ut_ad(index->has_instant_cols());

  field = index->get_nth_default(n, len);
  return (field);
}

/** Gets the value of the specified field in the record.
This is only used when there is possibility that the record comes from the
clustered index, which has some instantly add columns
@param[in]	rec	record
@param[in]	offsets	array returned by rec_get_offsets()
@param[in]	n	index of the field
@param[in]	index	clustered index where the record resides
@param[in,out]	len	length of the field, UNIV_SQL_NULL if SQL null
@return	value of the field, could be either pointer to rec or default value */
UNIV_INLINE
const byte *rec_get_nth_field_instant(const rec_t *rec, const ulint *offsets,
                                      ulint n, const dict_index_t *index,
                                      ulint *len) {
  ulint off = rec_get_nth_field_offs(offsets, n, len);

  if (*len != UNIV_SQL_ADD_COL_DEFAULT) {
    return (rec + off);
  }

  ut_a(index != nullptr);
  ut_ad(index->has_instant_cols());

  return (index->get_nth_default(n, len));
}
