/*****************************************************************************

Copyright (c) 1996, 2019, Oracle and/or its affiliates. All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2.0, as published by the
Free Software Foundation.

This program is also distributed with certain software (including but not
limited to OpenSSL) that is licensed under separate terms, as designated in a
particular file or component or in included license documentation. The authors
of MySQL hereby grant you an additional permission to link the program and
your derivative works with the separately licensed software that they have
included with MySQL.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License, version 2.0,
for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA

*****************************************************************************/

/** @file include/dict0dict.ic
 Data dictionary system

 Created 1/8/1996 Heikki Tuuri
 ***********************************************************************/

#include <innodb/mtr/mtr_set_log_mode.h>
#include <innodb/allocator/UT_NEW_NOKEY.h>
#include <innodb/sync_mutex/mutex_create.h>
#include <innodb/disk/univ_page_size.h>
#include <innodb/record/flag.h>
#include <innodb/dict_mem/dict_index_get_n_fields.h>
#include <innodb/dict_mem/dict_col_get_no.h>
#include <innodb/dict_mem/dict_col_get_clust_pos.h>
#include <innodb/dict_mem/dict_col_get_index_pos.h>
#include <innodb/dict_mem/dict_index_has_desc.h>
#include <innodb/dict_mem/dict_index_is_auto_gen_clust.h>
#include <innodb/dict_mem/dict_index_is_unique.h>
#include <innodb/dict_mem/dict_index_is_spatial.h>
#include <innodb/dict_mem/dict_index_has_virtual.h>
#include <innodb/dict_mem/dict_index_is_ibuf.h>
#include <innodb/dict_mem/dict_index_is_sec_or_ibuf.h>
#include <innodb/dict_mem/dict_table_get_n_v_cols.h>
#include <innodb/dict_mem/dict_table_has_indexed_v_cols.h>
#include <innodb/dict_mem/dict_table_get_n_rows.h>
#include <innodb/dict_mem/dict_table_n_rows_inc.h>
#include <innodb/dict_mem/dict_table_n_rows_dec.h>
#include <innodb/dict_mem/dict_table_get_sys_col_no.h>
#include <innodb/dict_mem/dict_table_is_comp.h>
#include <innodb/dict_mem/dict_table_has_fts_index.h>
#include <innodb/dict_mem/dict_tf_is_valid.h>
#include <innodb/dict_mem/dict_tf2_is_valid.h>
#include <innodb/dict_mem/dict_sys_tables_type_validate.h>
#include <innodb/dict_mem/dict_tf_get_rec_format.h>
#include <innodb/dict_mem/dict_table_has_atomic_blobs.h>
#include <innodb/dict_mem/dict_tf_set.h>
#include <innodb/dict_mem/dict_tf_init.h>
#include <innodb/dict_mem/dict_sys_tables_type_to_tf.h>
#include <innodb/dict_mem/dict_tf_to_sys_tables_type.h>
#include <innodb/dict_mem/dict_tf_get_page_size.h>
#include <innodb/dict_mem/dict_table_page_size.h>
#include <innodb/dict_mem/dict_index_get_lock.h>
#include <innodb/dict_mem/dict_table_x_lock_indexes.h>
#include <innodb/dict_mem/dict_table_x_unlock_indexes.h>
#include <innodb/dict_mem/dict_index_get_n_unique.h>
#include <innodb/dict_mem/dict_index_get_n_unique_in_tree.h>
#include <innodb/dict_mem/dict_index_get_n_unique_in_tree_nonleaf.h>
#include <innodb/dict_mem/dict_index_get_n_ordering_defined_by_user.h>
#include <innodb/dict_mem/dict_table_is_compressed_temporary.h>
#include <innodb/dict_mem/dict_index_get_space.h>
#include <innodb/dict_mem/dict_index_set_space.h>
#include <innodb/dict_mem/dict_index_get_page.h>
#include <innodb/dict_mem/dict_index_get_space_reserve.h>
#include <innodb/dict_mem/dict_index_get_online_status.h>
#include <innodb/dict_mem/dict_index_set_online_status.h>
#include <innodb/dict_mem/dict_index_is_online_ddl.h>
#include <innodb/dict_mem/dict_table_is_fts_column.h>
#include <innodb/dict_mem/dict_max_field_len_store_undo.h>
#include <innodb/dict_mem/dict_max_v_field_len_store_undo.h>
#include <innodb/dict_mem/dict_table_prevent_eviction.h>
#include <innodb/dict_mem/dict_table_allow_eviction.h>
#include <innodb/dict_mem/dict_table_ddl_acquire.h>
#include <innodb/dict_mem/dict_table_ddl_release.h>
#include <innodb/dict_mem/dict_table_is_discarded.h>
#include <innodb/dict_mem/dict_table_is_table_buffer.h>
#include <innodb/dict_mem/dict_table_is_locking_disabled.h>
#include <innodb/dict_mem/dict_table_get_index_on_first_col.h>
#include <innodb/dict_mem/dict_table_get_next_table_sess_row_id.h>
#include <innodb/dict_mem/dict_table_get_next_table_sess_trx_id.h>
#include <innodb/dict_mem/dict_table_get_curr_table_sess_trx_id.h>
#include <innodb/dict_mem/dict_table_mutex_alloc.h>
#include <innodb/dict_mem/dict_table_has_autoinc_col.h>
#include <innodb/dict_mem/dict_table_autoinc_persisted_update.h>
#include <innodb/dict_mem/dict_table_encode_n_col.h>
#include <innodb/dict_mem/dict_table_decode_n_col.h>
#include <innodb/dict_mem/dict_free_vc_templ.h>
#include <innodb/dict_mem/dict_table_have_virtual_index.h>
#include <innodb/dict_mem/dict_sdi_get_table_id.h>
#include <innodb/dict_mem/dict_sdi_get_space_id.h>
#include <innodb/dict_mem/dict_index_is_sdi.h>
#include <innodb/dict_mem/dict_table_is_sdi.h>
#include <innodb/dict_mem/dict_sdi_get_index_id.h>
#include <innodb/dict_mem/dict_table_is_partition.h>

#include "buf0flu.h"
#include "dict0load.h"
#include "fsp0fsp.h"
#include "srv0srv.h"


/** Check if the table is in a shared tablespace (System or General).
@param[in]	id	Space ID to check
@return true if id is a shared tablespace, false if not. */
UNIV_INLINE
bool dict_table_in_shared_tablespace(const dict_table_t *table) {
  return (fsp_is_system_or_temp_tablespace(table->space) ||
          DICT_TF_HAS_SHARED_SPACE(table->flags));
}


/** Turn-off redo-logging if temporary table. */
UNIV_INLINE
void dict_disable_redo_if_temporary(
    const dict_table_t *table, /*!< in: table to check */
    mtr_t *mtr)                /*!< out: mini-transaction */
{
  if (table->is_temporary()) {
    mtr_set_log_mode(mtr, MTR_LOG_NO_REDO);
  }
}

/** Check if the table is found is a file_per_table tablespace.
This test does not use table flags2 since some REDUNDANT tables in the
system tablespace may have garbage in the MIX_LEN field where flags2 is
stored. These garbage MIX_LEN fields were written before v3.23.52.
A patch was added to v3.23.52 which initializes the MIX_LEN field to 0.
Since file-per-table tablespaces were added in 4.1, any SYS_TABLES
record with a non-zero space ID will have a reliable MIX_LEN field.
However, this test does not use flags2 from SYS_TABLES.MIX_LEN.  Instead,
assume that if the tablespace is not a predefined system tablespace and it
is not a general shared tablespace, then it must be file-per-table.
Also, during ALTER TABLE, the DICT_TF2_USE_FILE_PER_TABLE flag may not be
set on one of the file-per-table tablespaces.
This test cannot be done on a table in the process of being created
because the space_id will be zero until the tablespace is created.
@param[in]	table	An existing open table to check
@return true if this table was created as a file-per-table tablespace. */
UNIV_INLINE
bool dict_table_is_file_per_table(
    const dict_table_t *table) /*!< in: table to check */
{
  bool is_file_per_table = !fsp_is_system_or_temp_tablespace(table->space) &&
                           !DICT_TF_HAS_SHARED_SPACE(table->flags);

  /* If the table is file-per-table and it is not redundant, then
  it should have the flags2 bit for DICT_TF2_USE_FILE_PER_TABLE. */
  /* flags2 is also not set for tables before 5.5 */
  ut_ad(!is_file_per_table || !DICT_TF_GET_COMPACT(table->flags) ||
        (table->flags2 == 0 ||
         DICT_TF2_FLAG_IS_SET(table, DICT_TF2_USE_FILE_PER_TABLE)));

  return (is_file_per_table);
}






/** Check if tablespace name is "innodb_general".
@param[in]	tablespace_name	tablespace name
@retval		true		if name is "innodb_general"
@retval		false		if name is not "innodb_general" */
inline bool dict_table_has_temp_general_tablespace_name(
    const char *tablespace_name) {
  return (tablespace_name != NULL &&
          strncmp(tablespace_name, general_space_name,
                  strlen(general_space_name)) == 0);
}






/** Allocate memory for intrinsic cache elements in the index
@param[in]      index   index object */
UNIV_INLINE
void dict_allocate_mem_intrinsic_cache(dict_index_t *index) {
  index->last_ins_cur = static_cast<last_ops_cur_t *>(
      mem_heap_alloc(index->heap, sizeof(last_ops_cur_t)));

  new (index->last_ins_cur) last_ops_cur_t();

  index->last_sel_cur = static_cast<last_ops_cur_t *>(
      mem_heap_alloc(index->heap, sizeof(last_ops_cur_t)));

  new (index->last_sel_cur) last_ops_cur_t();
}





