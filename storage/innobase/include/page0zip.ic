/*****************************************************************************

Copyright (c) 2005, 2018, Oracle and/or its affiliates. All Rights Reserved.
Copyright (c) 2012, Facebook Inc.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2.0, as published by the
Free Software Foundation.

This program is also distributed with certain software (including but not
limited to OpenSSL) that is licensed under separate terms, as designated in a
particular file or component or in included license documentation. The authors
of MySQL hereby grant you an additional permission to link the program and
your derivative works with the separately licensed software that they have
included with MySQL.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License, version 2.0,
for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA

*****************************************************************************/

/** @file include/page0zip.ic
 Compressed page interface

 Created June 2005 by Marko Makela
 *******************************************************/

#ifdef UNIV_MATERIALIZE
#undef UNIV_INLINE
#define UNIV_INLINE
#endif

#include <innodb/page/page_zip_get_size.h>
#include <innodb/page/page_dir_get_n_heap.h>
#include <innodb/page/page_zip_dir_start_offs.h>
#include <innodb/page/page_zip_get_trailer_len.h>
#include <innodb/page/page_zip_rec_needs_ext.h>
#include <innodb/page/page_zip_max_ins_size.h>
#include <innodb/page/page_zip_available.h>
#include <innodb/page/page_zip_dir_find_low.h>
#include <innodb/page/page_zip_dir_user_size.h>
#include <innodb/page/page_zip_dir_find_free.h>
#include <innodb/memory_check/memory_check.h>

#include "mtr0log.h"
#include "page0page.h"
#include "page0zip.h"
#include "srv0srv.h"
#include "page0types.h"


/** Write a log record of writing to the uncompressed header portion of a page.
 */
void page_zip_write_header_log(
    const byte *data, /*!< in: data on the uncompressed page */
    ulint length,     /*!< in: length of the data */
    mtr_t *mtr);      /*!< in: mini-transaction */

/** Write data to the uncompressed header portion of a page.  The data must
already have been written to the uncompressed page.
@param[in,out]	page_zip	compressed page
@param[in]	str		address on the uncompressed page
@param[in]	length		length of the data
@param[in]	mtr		mini-transaction, or NULL */
UNIV_INLINE
void page_zip_write_header(page_zip_des_t *page_zip, const byte *str,
                           ulint length, mtr_t *mtr) {
  ulint pos;

  ut_ad(page_zip_simple_validate(page_zip));
  UNIV_MEM_ASSERT_RW(page_zip->data, page_zip_get_size(page_zip));

  pos = page_offset(str);

  ut_ad(pos < PAGE_DATA);

  memcpy(page_zip->data + pos, str, length);

  /* The following would fail in page_cur_insert_rec_zip(). */
  /* ut_ad(page_zip_validate(page_zip, str - pos)); */

  if (mtr) {
#ifndef UNIV_HOTBACKUP
    page_zip_write_header_log(str, length, mtr);
#endif /* !UNIV_HOTBACKUP */
  }
}

/** Write a log record of compressing an index page without the data on the
 * page.
 */
UNIV_INLINE
void page_zip_compress_write_log_no_data(
    ulint level,         /*!< in: compression level */
    const page_t *page,  /*!< in: page that is compressed */
    dict_index_t *index, /*!< in: index */
    mtr_t *mtr)          /*!< in: mtr */
{
#ifndef UNIV_HOTBACKUP
  byte *log_ptr = mlog_open_and_write_index(mtr, page, index,
                                            MLOG_ZIP_PAGE_COMPRESS_NO_DATA, 1);

  if (log_ptr) {
    mach_write_to_1(log_ptr, level);
    mlog_close(mtr, log_ptr + 1);
  }
#endif /* !UNIV_HOTBACKUP */
}

/** Parses a log record of compressing an index page without the data.
 @return end of log record or NULL */
UNIV_INLINE
byte *page_zip_parse_compress_no_data(
    byte *ptr,                /*!< in: buffer */
    byte *end_ptr,            /*!< in: buffer end */
    page_t *page,             /*!< in: uncompressed page */
    page_zip_des_t *page_zip, /*!< out: compressed page */
    dict_index_t *index)      /*!< in: index */
{
  ulint level;
  if (end_ptr == ptr) {
    return (NULL);
  }

  level = mach_read_from_1(ptr);

  /* If page compression fails then there must be something wrong
  because a compress log record is logged only if the compression
  was successful. Crash in this case. */

  if (page && !page_zip_compress(page_zip, page, index, level, NULL)) {
    ut_error;
  }

  return (ptr + 1);
}

#ifndef UNIV_HOTBACKUP
/** Reset the counters used for filling
 INFORMATION_SCHEMA.innodb_cmp_per_index. */
UNIV_INLINE
void page_zip_reset_stat_per_index() {
  mutex_enter(&page_zip_stat_per_index_mutex);

  page_zip_stat_per_index.erase(page_zip_stat_per_index.begin(),
                                page_zip_stat_per_index.end());

  mutex_exit(&page_zip_stat_per_index_mutex);
}
#endif /* !UNIV_HOTBACKUP */







#ifdef UNIV_MATERIALIZE
#undef UNIV_INLINE
#define UNIV_INLINE UNIV_INLINE_ORIGINAL
#endif
