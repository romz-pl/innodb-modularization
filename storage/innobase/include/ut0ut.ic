/*****************************************************************************

Copyright (c) 1994, 2018, Oracle and/or its affiliates. All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2.0, as published by the
Free Software Foundation.

This program is also distributed with certain software (including but not
limited to OpenSSL) that is licensed under separate terms, as designated in a
particular file or component or in included license documentation. The authors
of MySQL hereby grant you an additional permission to link the program and
your derivative works with the separately licensed software that they have
included with MySQL.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License, version 2.0,
for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA

*****************************************************************************/

/** @file include/ut0ut.ic
 Various utilities

 Created 5/30/1994 Heikki Tuuri
 *******************************************************************/

#include <algorithm>

#include "os0thread.h"
#include "ut0dbg.h"










#ifndef UNIV_HOTBACKUP
/** Waits in loop until given condition is satisfied. It starts waiting
using spin loop with pauses and after reaching maximum iterations, it
switches to loop with sleeps. The sleep time is multiplied by two after
every k-sleeps, until it reaches 100ms (starting at provided value).
@param[in]	spins_limit		maximum iterations without sleep
@param[in]	sleep			initial sleep time in microseconds
@param[in]	condition		returns true when condition is
                                        satisfied
@return		number of loops with sleep that have been used */
template <typename Condition>
inline static Wait_stats ut_wait_for(uint64_t spins_limit, uint64_t sleep,
                                     Condition condition = {}) {
  uint64_t sleeps = 0, spins = 0;
#ifdef _WIN32
  uint64_t next_level = 64;
#else
  uint64_t next_level = 4;
#endif

  while (!condition(spins == spins_limit)) {
    if (spins == spins_limit) {
      ++sleeps;

      if (sleeps == next_level) {
        sleep = std::min(sleep * 2, uint64_t{100 * 1000});

#ifdef _WIN32
        next_level += 64;
#else
        next_level += 4;
#endif
      }

      os_thread_sleep(sleep);

    } else {
      ++spins;

      UT_RELAX_CPU();
    }
  }

  return (Wait_stats{sleeps});
}

#endif /* !UNIV_HOTBACKUP */
